import React, { useState, useEffect } from 'react';
import { Text, View, Pressable } from 'react-native'
import materialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';
import styles from '../style/style';
import { NBR_OF_DICES, NBR_OF_THROWS, MAX_SPOT } from '../constants/Game'
import { Col, Grid, Row } from 'react-native-easy-grid';
import { MaterialCommunityIcons } from '@expo/vector-icons';


let board = [];

export default Gameboard = ({ route }) => {

  const [playerName, setPlayerName] = useState('');
  const [nbrOfThrowsLeft, setNbrOfThrowsLeft] = useState(NBR_OF_THROWS);
  const [status, setStatus] = useState('');

  const [selectedDices, setSelectedDices] = 
    useState(new Array(NBR_OF_DICES).fill(false));

  const [diceSpots, setDiceSpots] = useState(new Array(NBR_OF_DICES).fill(0));

  const [dicePointsTotal, setDicePointsTotal] = useState(new Array(MAX_SPOT).fill(0));

  const [selectedDicePoints, setSelectedDicePoints] = 
    useState(new Array(MAX_SPOT).fill(false));

  const pointsRow = [];

  for ( let spot = 0; spot < MAX_SPOT; spot++ ) {
    pointsRow.push(
      <Col key={"points" + spot}>
        <Text key={"points" + spot} style={styles.points}>0</Text>
      </Col>
    )
  }

  const buttonRow = [];

  for ( let diceButton = 0; diceButton < MAX_SPOT; diceButton++ ) {
    buttonRow.push(
        <Col key={"buttonsRow" + diceButton}>
            <Pressable
            key={"buttonsRow" + diceButton}>
                <MaterialCommunityIcons
                name={"numeric-" + (diceButton + 1) + "-circle"}
                key={"buttonsRow" + diceButton}
                size={40}
                color={"steelblue"}
                ></MaterialCommunityIcons>
            </Pressable>
        </Col>
    )
  }

  function getDiceColor(i) {
    if (board.every((val, i, arr) => val === arr[0])) {
      return "orange";
    }
    else {
      return selectedDices[i] ? "black" : "steelblue";
    }
  }

  function selectDice(i) {
    let dices = [...selectedDices];
    dices[i] = selectedDices[i] ? false : true;
    setSelectedDices(dices);
  }

  function throwDices() {
    for (let i = 0; i < NBR_OF_DICES; i++) {
      if (!selectedDices[i]) {
        let randomNumber = Math.floor(Math.random() * 6 + 1);
        board[i] = 'dice-' + randomNumber;
      }
    }
    setNbrOfThrowsLeft(nbrOfThrowsLeft-1);
  }

  return (
    <View style={styles.gameboard}>
      <View style={styles.flex}>{Row}</View>
      <Text style={styles.gameinfo}>Throws left: {nbrOfThrowsLeft}</Text>
      <Text style={styles.gameinfo}>{status}</Text>
      <Pressable style={styles.button}
        onPress={() => throwDices()}>
          <Text style={styles.buttonText}>
            Throw dices
          </Text>
      </Pressable>
      <View style={styles.dicePoints}><Grid>{pointsRow}</Grid></View>
      <View style={styles.dicePoints}><Grid>{buttonRow}</Grid></View>
      <Text>Player: {playerName} </Text>
    </View>
  )
}